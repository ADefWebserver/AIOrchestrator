@using AIOrchestrator.Model;
@using Newtonsoft.Json;
@using OpenAI;
@using static AIOrchestrator.Model.OrchestratorMethods;
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject LogService LogService
@inject OrchestratorMethods OrchestratorMethods
@implements IDisposable
<h3>Home</h3>
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
<!-- Dropdown showing files in the Documents directory -->
<div class="row">
    <div class="col">
        <RadzenLabel><b>Select File:</b></RadzenLabel><RadzenDropDown @bind-Value=@SelectedFile Data=@DocumentFiles TextProperty="Name" ValueProperty="FullName" Style="width: 300px" />
    </div>
</div>
<br />
<RadzenTabs TabPosition=TabPosition.Top RenderMode="TabRenderMode.Server" Change=@OnTabChange>
    <Tabs>
        <RadzenTabsItem Text="Text">
            <div class="row">
                <div class="col">
                    <RadzenButton Text="Load Text" ButtonStyle="ButtonStyle.Success"
                                  Click="LoadText"
                                  Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
                </div>
            </div>
            <RadzenTextArea @bind-Value=@TextFileRaw Cols="70" Rows="10" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Summarize Text (Short)">
            <div class="row">
                <div class="col">
                    <RadzenButton Text="Summarize Text" ButtonStyle="ButtonStyle.Info"
                                  Click="SummarizeTextShort"
                                  Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
                    <RadzenLabel><b>Chunk Size (words):</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intChunkSize style="width:75px" />
                    &nbsp;&nbsp
                    <RadzenLabel><b>Max Iterations:</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intMaxLoops style="width:75px" />
                </div>
            </div>
            <RadzenTextArea @bind-Value=@txtSummarizeTextShort Cols="70" Rows="10" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Summarize Text (Long)">
            <div class="row">
                <div class="col">
                    <RadzenButton Text="Summarize Text" ButtonStyle="ButtonStyle.Info"
                                  Click="SummarizeTextLong"
                                  Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
                    <RadzenLabel><b>Chunk Size (words):</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intChunkSize style="width:75px" />
                    &nbsp;&nbsp
                    <RadzenLabel><b>Max Iterations:</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intMaxLoops style="width:75px" />
                </div>
            </div>
            <RadzenTextArea @bind-Value=@txtSummarizeTextLong Cols="70" Rows="10" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Summarize Characters">
            <div class="row">
                <div class="col">
                    <RadzenLabel><b>Chunk Size (words):</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intChunkSize style="width:75px" />
                    &nbsp;&nbsp
                    <RadzenLabel><b>Max Iterations:</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intMaxLoops style="width:75px" />
                    <div class="row"></div><br />
                    <div class="row">
                        <div class="col">
                            <RadzenButton Text="Load Characters" ButtonStyle="ButtonStyle.Info"
                                          Click="LoadCharacters"
                                          Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;<RadzenDropDown @bind-Value=@SelectedCharacter Data=@colCharacters Style="width: 200px" />&nbsp;&nbsp;
                            @if (colCharacters.Count > 0)
                            {
                                <RadzenButton Text="Summarize Character" ButtonStyle="ButtonStyle.Success"
                                              Click="SummarizeCharacter"
                                              Style="margin-bottom: 10px; width: 200px" />
                            }
                        </div>
                    </div>
                </div>
            </div>
            <RadzenTextArea @bind-Value=@txtSummarizeCharacter Cols="75" Rows="10" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Complete Story">
            <div class="row">
                <div class="col">
                    <RadzenLabel><b>Chunk Size (words):</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intChunkSize style="width:75px" />
                    &nbsp;&nbsp
                    <RadzenLabel><b>Max Iterations:</b></RadzenLabel>&nbsp;&nbsp<RadzenNumeric @bind-Value=@intMaxLoops style="width:75px" />
                    <div class="row"></div><br />
                    <div class="row">
                        <div class="col">
                            @if (!StoryLoaded)
                            {
                                <RadzenButton Text="Load Story" ButtonStyle="ButtonStyle.Info"
                                              Click="LoadStory"
                                              Style="margin-bottom: 10px; width: 150px" />
                            }
                        </div>
                    </div>
                </div>
            </div>
            @if (StoryLoaded)
            {
                <RadzenTextArea @bind-Value=@txtNewStory Cols="75" Rows="10" />
            }&nbsp;&nbsp;<br />
            @if (StoryLoaded)
            {
                <RadzenButton Text="Complete The Story" ButtonStyle="ButtonStyle.Success"
                              Click="CompleteStory"
                              Style="margin-bottom: 10px; width: 200px" />
            }&nbsp;&nbsp;
            @if (StoryLoaded)
            {
                <RadzenButton Text="Reset" ButtonStyle="ButtonStyle.Danger"
                              Click="ResetStory"
                              Style="margin-bottom: 10px; width: 100px" />
            }&nbsp;&nbsp;
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    private string TextFileRaw = "";
    private string txtSummarizeTextShort = "";
    private string txtSummarizeTextLong = "";
    private string txtSummarizeCharacter = "";
    private bool StoryLoaded = false;
    private string txtNewStory = "";
    private string SelectedCharacter = "";
    private List<string> colCharacters = new List<string>();
    bool InProgress = false;

    List<System.IO.FileInfo> DocumentFiles = new List<System.IO.FileInfo>();
    string SelectedFile { get; set; }

    int intMaxLoops = 3;
    int intChunkSize = 2000;

    protected override void OnInitialized()
    {
        // Get the list of files in the Documents directory
        var DocumentPath = $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}\\AIOrchestrator\\Documents";
        var dir = new DirectoryInfo(DocumentPath);
        DocumentFiles = dir.GetFiles().ToList();

        if (DocumentFiles.Count > 0)
        {
            SelectedFile = DocumentFiles[0].FullName;
        }

        OrchestratorMethods.ReadTextEvent += OrchestratorMethods_ReadTextEvent;
    }

    private async Task LoadText()
    {
        try
        {
            InProgress = true;

            // Open the file to get existing content
            using (var streamReader = new StreamReader(SelectedFile))
            {
                TextFileRaw = await streamReader.ReadToEndAsync();
            }

            InProgress = false;
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task SummarizeTextShort()
    {
        try
        {
            InProgress = true;

            ClearLog();

            txtSummarizeTextShort = await OrchestratorMethods.ReadTextShort(SelectedFile, intMaxLoops, intChunkSize);
            InProgress = false;
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task SummarizeTextLong()
    {
        try
        {
            InProgress = true;

            ClearLog();
            ClearMemory("");

            txtSummarizeTextLong = await OrchestratorMethods.ReadTextLong(SelectedFile, intMaxLoops, intChunkSize);
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Data Indexed",
                    Detail = "You can perform a vector search on the Memory page",
                    Duration = 8000
                });
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task LoadCharacters()
    {
        try
        {
            InProgress = true;

            ClearLog();

            colCharacters = await OrchestratorMethods.LoadCharacters(SelectedFile, intMaxLoops, intChunkSize);
            InProgress = false;
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task SummarizeCharacter()
    {
        try
        {
            if (SelectedCharacter == "")
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Please select a character",
                        Duration = 4000
                    });

                return;
            }

            InProgress = true;

            ClearLog();
            ClearMemory("");

            txtSummarizeCharacter = await OrchestratorMethods.SummarizeCharacter(SelectedFile, SelectedCharacter, intMaxLoops, intChunkSize);
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Data Indexed",
                    Detail = "You can perform a vector search on the Memory page",
                    Duration = 8000
                });
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task LoadStory()
    {
        try
        {
            InProgress = true;

            StoryLoaded = false;
            ClearLog();
            ClearMemory(SelectedFile);

            StoryLoaded = await OrchestratorMethods.LoadStory(SelectedFile, intMaxLoops, intChunkSize);
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Data Indexed",
                    Detail = "You can perform a vector search on the Memory page",
                    Duration = 8000
                });
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void ResetStory()
    {
        try
        {
            InProgress = true;

            StoryLoaded = false;

            ClearLog();
            ClearMemory("");

            InProgress = false;
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task CompleteStory()
    {
        try
        {
            InProgress = true;

            var result = await OrchestratorMethods.CompleteStory(txtNewStory, intMaxLoops, intChunkSize);
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Story Complete",
                    Detail = result,
                    Duration = 10000
                });
        }
        catch (Exception ex)
        {
            LogService.WriteToLog($"Error: {ex.Message}");

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }


    // Utility


    private void OrchestratorMethods_ReadTextEvent(object sender, EventArgs e)
    {
        ReadTextEventArgs ReadTextEventArguments = (ReadTextEventArgs)e;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Info",
                Detail = ReadTextEventArguments.Message,
                Duration = 4000
            });
    }

    void OnTabChange(int index)
    {
        if (index == 4) // Complete Story Tab
        {
            // Read the first line to see if the latest story is loaded
            var AIOrchestratorMemoryPath =
            $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIOrchestrator/AIOrchestratorMemory.csv";

            string firstLine = "";
            using (StreamReader sr = new StreamReader(AIOrchestratorMemoryPath))
            {
                firstLine = sr.ReadLine();
            }

            // Get the filename from the path
            string fileName = Path.GetFileName(SelectedFile);

            if (firstLine != (fileName + "|"))
            {
                StoryLoaded = false;
            }
            else
            {
                StoryLoaded = true;
            }
        }
    }

    public void Dispose()
    {
        OrchestratorMethods.ReadTextEvent -= OrchestratorMethods_ReadTextEvent;
    }


    // Utility

    private void ClearLog()
    {
        try
        {
            var AIOrchestratorLogPath = $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIOrchestrator/AIOrchestratorLog.csv";

            using (var streamWriter = new StreamWriter(AIOrchestratorLogPath))
            {
                streamWriter.WriteLine(string.Join("\n", "Log cleared on " + DateTime.Now));
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void ClearMemory(string paramSelectedFile)
    {
        try
        {
            var AIOrchestratorMemoryPath =
            $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIOrchestrator/AIOrchestratorMemory.csv";

            using (var streamWriter = new StreamWriter(AIOrchestratorMemoryPath))
            {
                if (paramSelectedFile == "")
                {
                    streamWriter.WriteLine("** AIOrchestratorMemory started at " + DateTime.Now + "|");
                }
                else
                {
                    // Get the filename from the path
                    string fileName = Path.GetFileName(paramSelectedFile);
                    streamWriter.WriteLine(fileName + "|");
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}