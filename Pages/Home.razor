@using AIOrchestrator.Model;
@using Newtonsoft.Json;
@using OpenAI;
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SettingsService SettingsService
@inject OrchestratorMethods OrchestratorMethods
<h3>Home</h3>
@if (@InProgress)
{
    <div class="rz-m-12">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
<RadzenTabs TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Text">
            <div class="row">
                <div class="col">
                    <RadzenButton Text="Load Text" ButtonStyle="ButtonStyle.Success"
                                  Click="LoadText"
                                  Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
                </div>
            </div>
            <RadzenTextArea @bind-Value=@ATaleofTwoCitiesRaw Cols="70" Rows="10" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="SummarizeText">
            <div class="row">
                <div class="col">
                    <RadzenButton Text="Summarize Text" ButtonStyle="ButtonStyle.Info"
                                  Click="SummarizeText"
                                  Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
                </div>
            </div>
            <RadzenTextArea @bind-Value=@txtSummarizeText Cols="70" Rows="10" />
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    private string ATaleofTwoCitiesRaw = "";
    private string txtSummarizeText = "";
    bool InProgress = false;

    private async Task LoadText()
    {
        try
        {
            InProgress = true;
            using var stream = await FileSystem.OpenAppPackageFileAsync("ATaleofTwoCities.txt");
            using var reader = new StreamReader(stream);

            ATaleofTwoCitiesRaw = reader.ReadToEnd();
            InProgress = false;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task SummarizeText()
    {
        try
        {
            InProgress = true;
            txtSummarizeText = await OrchestratorMethods.ReadText();
            InProgress = false;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

}