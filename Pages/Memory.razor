@inject NotificationService NotificationService
@inject DialogService DialogService
<h3>Memory</h3>
<div class="row">
    <div class="col">
        <RadzenButton Text="Clear Memory" ButtonStyle="ButtonStyle.Danger"
                      Click="ClearMemory"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
    </div>
</div>
<RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="true"
                PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@AIOrchestratorMemory" TItem="KeyValuePair<string, string>" ColumnWidth="300px" 
                ShowPagingSummary="true">
    <Columns>
        <RadzenDataGridColumn TItem="KeyValuePair<string, string>" Title="" Property="Key" />
    </Columns>
</RadzenDataGrid>


@code {
    string AIOrchestratorMemoryPath = "";
    Dictionary<string, string> AIOrchestratorMemory = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        AIOrchestratorMemoryPath =
        $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIOrchestrator/AIOrchestratorMemory.csv";

        // Read the lines from the .csv file
        @foreach (var line in System.IO.File.ReadAllLines(AIOrchestratorMemoryPath))
        {
            var splitLine = line.Split(',');
            var column1 = splitLine[0];
            var column2 = splitLine[1];

            // Add your values
            AIOrchestratorMemory.Add(column1, column2);
        }
    }

    private void ClearMemory()
    {
        try
        {
            using (var streamWriter = new StreamWriter(AIOrchestratorMemoryPath))
            {
                streamWriter.WriteLine("** AIOrchestratorMemory started at " + DateTime.Now + ",");
            }

            // Read the lines from the .csv file
            @foreach (var line in System.IO.File.ReadAllLines(AIOrchestratorMemoryPath))
            {
                var splitLine = line.Split(',');
                var column1 = splitLine[0];
                var column2 = splitLine[1];

                // Add your values
                AIOrchestratorMemory.Add(column1, column2);
            }

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Log Cleared",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}
