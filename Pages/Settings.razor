@using Newtonsoft.Json;
@inject NotificationService NotificationService
@inject DialogService DialogService
<div class="container-fluid">

    <div>
        <RadzenFormField Text="OpenAI Organization:" Variant="@variant">
            <RadzenTextBox @bind-Value="@Organization" style="width:300px;" />
        </RadzenFormField>
    </div>
    <div class="col-12">
        <RadzenFormField Text="OpenAI ApiKey:" Variant="@variant">
            <RadzenTextBox @bind-Value="@ApiKey" style="width:300px;" />
        </RadzenFormField>
    </div>

</div>
<br />
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="SettingsSave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
    </div>
</div>
@code {

    IEnumerable<string> colStyles;
    Variant variant = Variant.Outlined;

    dynamic AIOrchestratorSettingsObject;
    string AIOrchestratorSettingsPath = "";
    string AIOrchestratorSettings = "";
    string Organization = "";
    string ApiKey = "";

    protected override void OnInitialized()
    {
        // AIOrchestrator Directory
        AIOrchestratorSettingsPath =
        $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIOrchestrator/AIOrchestratorSettings.config";

        // Open the file to get existing content
        using (var streamReader = new StreamReader(AIOrchestratorSettingsPath))
        {
            AIOrchestratorSettings = streamReader.ReadToEnd();
        }

        // Convert the JSON to a dynamic object
        AIOrchestratorSettingsObject = JsonConvert.DeserializeObject(AIOrchestratorSettings);
        Organization = AIOrchestratorSettingsObject.OpenAIServiceOptions.Organization;
        ApiKey = AIOrchestratorSettingsObject.OpenAIServiceOptions.ApiKey;
    }

    private async Task SettingsSave()
    {
        try
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Saved",
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}